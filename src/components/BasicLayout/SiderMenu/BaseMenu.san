<template>
    <s-menu
        theme="{{theme || 'light'}}"
        mode="{{mode}}"
        selectedKeys="{{selectedKeys}}"
        openKeys="{{openKeys}}"
    >
        <menu-item-render
            s-for="item in list"
            item="{{item}}"
        />
    </s-menu>
</template>

<script>
import san from 'san';
import {Layout, Icon, Menu} from 'santd';
import {Link} from 'san-router';
import {isUrl} from '../utils';

const MenuItemRender = san.defineComponent({
    template: `
            <s-sub-menu s-if="hasChildren(item)" key="{{item.rule}}">
                <template slot="title">
                    <s-icon type="{{item.icon}}" />
                    <span>{{item.name}}</span>
                </template>
                <menu-item-render
                    s-for="data in item.children"
                    item="{{data}}"/>
            </s-sub-menu>
            <s-menu-item s-else key="{{item.rule}}">
                <s-icon type="{{item.icon}}"/>
                <a 
                    s-if="isUrl(item.rule)"
                    href="{{item.rule}}"
                    style="display: inline-block;"
                >
                    <span>{{item.name}}</span>
                </a>
                <r-link
                    s-else 
                    to="{{item.rule}}"
                    style="display:inline-block"
                >
                    <span>{{item.name}}</span>
                </r-link>
            </s-menu-item>`,

    components: {
        's-icon': Icon,
        's-menu': Menu,
        's-sub-menu': Menu.Sub,
        's-menu-item': Menu.Item,
        'r-link': Link,
        'menu-item-render': 'self'
    },

    hasChildren(item) {
        if (!Array.isArray(item.children)) {
            return false;
        }

        return (
            item &&
            !item.hideChildrenInMenu &&
            item?.children &&
            item.children.some((child) => child && !!child.name && !child.hideInMenu)
        );
    },

    isUrl(itemUrl) {
        return isUrl(itemUrl);
    }
});

export default {
    computed: {
        list() {
            const menusData = this.data.get('menusData') || [];
            return  menusData
                .filter((item) => item.name && !item.hideInMenu);
        }
    },

    components: {
        's-icon': Icon,
        's-menu': Menu,
        's-sub-menu': Menu.Sub,
        's-menu-item': Menu.Item,
        'r-link': Link,
        'menu-item-render': MenuItemRender
    }
};
</script>
